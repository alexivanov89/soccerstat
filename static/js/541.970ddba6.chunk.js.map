{"version":3,"file":"static/js/541.970ddba6.chunk.js","mappings":"2QAuHA,UArGqB,WAAO,IAAD,IACnBA,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,MACVC,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,IAAYC,EAAAA,IACxC,GAA6BD,EAAAA,EAAAA,KAAY,qBAAGE,WAApCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAClB,GAAoCJ,EAAAA,EAAAA,KAAY,qBAAGK,eAA3CC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,MAEpBC,EAAqBV,EAAoBW,MAAK,SAACC,EAAGC,GACtD,OAAID,EAAEE,KAAKC,cAAgBF,EAAEC,KAAKC,eACxB,EACCH,EAAEE,KAAKC,cAAgBF,EAAEC,KAAKC,cAChC,EAEA,MAIXC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EASd,OARA,UAAItB,EAASuB,aAAb,OAAI,EAAgBC,IAClBpB,GACEqB,EAAAA,EAAAA,GAAsBzB,EAASuB,MAAMC,GAAI,CACvC,CAAEJ,KAAM,WAAYM,MAAOhB,GAC3B,CAAEU,KAAM,SAAUM,MAAOf,MAIxB,WACLP,GAASuB,EAAAA,EAAAA,IAAqB,OAC9BvB,GAASwB,EAAAA,EAAAA,UAEV,CAAClB,EAAUC,EAAX,UAAmBX,EAASuB,aAA5B,aAAmB,EAAgBC,MAEtCF,EAAAA,EAAAA,YAAU,WAER,OADAlB,GAASyB,EAAAA,EAAAA,IAAsB,OACxB,WACLzB,GAASwB,EAAAA,EAAAA,UAEV,IAEH,IAAME,GAAeC,EAAAA,EAAAA,cACnB,SAACL,GACCtB,GAASuB,EAAAA,EAAAA,IAAoB,OAACD,QAAD,IAACA,OAAD,EAACA,EAAOF,KACrCtB,EAAQ8B,KAAK,CACXC,SAAUC,EAAAA,EAAAA,aACVX,MAAO,CAAEC,GAAG,GAAD,cAAKE,QAAL,IAAKA,OAAL,EAAKA,EAAOF,SAG3B,CAACpB,IAGH,OACE,8BACG,UAAAJ,EAASuB,aAAT,SAAgBC,IACf,gCACGV,GAAW,WACVA,IAAYC,IAAS,SAAC,IAAD,CAAcF,QAASA,IAC7CE,IACC,UAAC,IAAD,CACEoB,GAAI,CACFC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UALhB,WAQE,SAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,MAAM,QAAQC,MAAM,SAA5D,sEAGA,SAAC,IAAD,CAAQC,QAAS1C,EAAQ2C,OAAQL,QAAQ,YAAzC,0GAON,UAAC,IAAD,CACEL,GAAI,CACFW,aAAc,EACdC,UAAW,QACXX,QAAS,OACTC,cAAe,SACfE,WAAY,SACZD,eAAgB,gBAPpB,WAUE,SAAC,IAAD,CACEU,eAAgB,SAACC,GAAD,gBAAeA,EAAO7B,KAAtB,aAA+B6B,EAAOC,KAAK9B,OAC3D+B,QAASnC,EACToC,SAAUtB,EACVuB,MAAO,+EAET,SAAC,IAAD,CAAYb,QAAQ,KAAKE,MAAM,UAA/B","sources":["pages/TeamCalendar/TeamCalendar.js"],"sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport Typography from '@mui/material/Typography';\nimport { ListCalendar } from '../../components/ListCalendar';\nimport { MyAutocomplete } from '../../components/MyAutocomplete';\nimport { fetchMatchesTeamAsync } from '../../store/reducers/matchesTeamReducer';\nimport {\n  fetchTeamsLeagueAsync,\n  getTeamsLeagueSelector,\n} from '../../store/reducers/teamsLeagueReducer';\nimport { SetFilterTeamsLeague } from '../../store/actions/creator/teamsLeague';\nimport { ClearMatchesTeam } from '../../store/actions/creator/matchesTeam';\nimport { routesPath } from '../../router/routes';\n\nconst TeamCalendar = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const teamsLeagueSelected = useSelector(getTeamsLeagueSelector);\n  const { dateFrom, dateTo } = useSelector(({ filters }) => filters);\n  const { matches, loading, error } = useSelector(({ matchesTeam }) => matchesTeam);\n\n  const prepareTeamsLeague = teamsLeagueSelected.sort((a, b) => {\n    if (a.name.toLowerCase() < b.name.toLowerCase()) {\n      return -1;\n    } else if (a.name.toLowerCase() > b.name.toLowerCase()) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n\n  useEffect(() => {\n    if (location.state?.id) {\n      dispatch(\n        fetchMatchesTeamAsync(location.state.id, [\n          { name: 'dateFrom', value: dateFrom },\n          { name: 'dateTo', value: dateTo },\n        ]),\n      );\n    }\n    return () => {\n      dispatch(SetFilterTeamsLeague(null));\n      dispatch(ClearMatchesTeam());\n    };\n  }, [dateFrom, dateTo, location.state?.id]);\n\n  useEffect(() => {\n    dispatch(fetchTeamsLeagueAsync(2021));\n    return () => {\n      dispatch(ClearMatchesTeam());\n    };\n  }, []);\n\n  const handleChange = useCallback(\n    (value) => {\n      dispatch(SetFilterTeamsLeague(value?.id));\n      history.push({\n        pathname: routesPath.teamCalendar,\n        state: { id: `${value?.id}` },\n      });\n    },\n    [dispatch],\n  );\n\n  return (\n    <>\n      {location.state?.id ? (\n        <>\n          {loading && 'loading'}\n          {!loading && !error && <ListCalendar matches={matches} />}\n          {error && (\n            <Box\n              sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n            >\n              <Typography variant=\"h1\" component=\"h2\" color=\"white\" align=\"center\">\n                нет данных\n              </Typography>\n              <Button onClick={history.goBack} variant=\"contained\">\n                Вернуться назад\n              </Button>\n            </Box>\n          )}\n        </>\n      ) : (\n        <Card\n          sx={{\n            borderRadius: 4,\n            minHeight: '120px',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'space-evenly',\n          }}\n        >\n          <MyAutocomplete\n            getOptionLabel={(option) => `${option.name}, ${option.area.name}`}\n            options={prepareTeamsLeague}\n            onChange={handleChange}\n            label={'Найти команду'}\n          />\n          <Typography variant=\"h5\" color=\"initial\">\n            Выберите команду\n          </Typography>\n        </Card>\n      )}\n    </>\n  );\n};\n\nexport default TeamCalendar;\n"],"names":["location","useLocation","history","useHistory","dispatch","useDispatch","teamsLeagueSelected","useSelector","getTeamsLeagueSelector","filters","dateFrom","dateTo","matchesTeam","matches","loading","error","prepareTeamsLeague","sort","a","b","name","toLowerCase","useEffect","state","id","fetchMatchesTeamAsync","value","SetFilterTeamsLeague","ClearMatchesTeam","fetchTeamsLeagueAsync","handleChange","useCallback","push","pathname","routesPath","sx","display","flexDirection","justifyContent","alignItems","variant","component","color","align","onClick","goBack","borderRadius","minHeight","getOptionLabel","option","area","options","onChange","label"],"sourceRoot":""}